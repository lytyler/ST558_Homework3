---
title: "Homework 3"
author: "Lanette Tyler"
format: html
editor: visual
---

## Setting up the Environment

**Load data** into environment:

```{r}
load("hw2_list.rda") #given in HW3 assignment
bp_list

```

## Task 1: Control Flow Practice

1.  **Add a status column to both data frames** in the list (treatment and placebo).

```{r}
bp_list$treatment$status <- character(dim(bp_list$treatment)[1])
bp_list$placebo$status <- character(dim(bp_list$placebo)[1])
bp_list$treatment
bp_list$placebo
```

2.  **Create values in the status column of the** ***treatment*** **data frame** within the list using a for loop and if/then/else logic.

-   optimal (≤ 120)
-   borderline (120 \< bp ≤ 130)
-   high (\> 130)

```{r}
for (i in 1:dim(bp_list$treatment)[1]) {
  if (bp_list$treatment$post_bp[i] <= 120) {
    bp_list$treatment$status[i] <- "optimal"
  } else if (bp_list$treatment$post_bp[i] <= 130) {
    bp_list$treatment$status[i] <- "borderline"
  } else if (bp_list$treatment$post_bp[i] > 130) {
    bp_list$treatment$status[i] <- "high"
  } 
}
bp_list$treatment
```

3.  **Create values for the status column in the** ***placebo*** **data frame** within the list using a for loop and if/then/else logic.

-   optimal (≤ 120)
-   borderline (120 \< bp ≤ 130)
-   high (\> 130)

```{r}
for (i in 1:dim(bp_list$placebo)[1]) {
  if (bp_list$placebo$post_bp[i] <= 120) {
    bp_list$placebo$status[i] <- "optimal"
  } else if (bp_list$placebo$post_bp[i] <= 130) {
    bp_list$placebo$status[i] <- "borderline"
  } else if (bp_list$placebo$post_bp[i] > 130) {
    bp_list$placebo$status[i] <- "high"
  } 
}
bp_list$placebo
```

## Task 2: Function Writing

**Write a function**:

-   **Take in a list with two data frames** (a treatment and a placebo data frame) as an argument. Give no default value.

-   **Take in an R function** to find a summary statistic of a numeric column with the default value set to "mean".

-   **Find the statistic of interest** as defined by the user input for the pre, post, and diff columns of both data frames.

-   These six values should then be **returned as a named list** with meaningful names:

```{r}
get_stat <- function(list_of_dfs, stat = "mean") {
#  stat = "mean"
  result <- numeric(6)
  result_names <- character(6)
  my_fun <- get(stat)
  for (i in 1:2) {
    for (j in 1:3) {
      ifelse(i == 1,
            result[j] <- my_fun(list_of_dfs[[i]][ , j+1]),
            result[j+3] <- my_fun(list_of_dfs[[i]][ ,j+1]))
      ifelse(i == 1,
             result_names[j] <- paste0(names(list_of_dfs[i])," ",       colnames(list_of_dfs[[i]][j+1])," ", stat),
             result_names[j+3] <- paste0(names(list_of_dfs[i]), " ", colnames(list_of_dfs[[i]][j+1])," ", stat)
             )
    }
  }
  names(result) <- result_names
  result
}
get_stat(bp_list)
```

**Apply the function** to the list of data frames from the previous homework. (I had been using the list provided with HW3 for task 1 called bp_list, so am switching data now).

First, **load and modify my hw2 list** called bp_study as the list given in hw 3 was modified in task 1. Also change column names in my hw2 list (bp_study) to match expected format.

```{r}
#load in list of bp data frames from HW 2
load("C:/Users/lanet/OneDrive/Documents/R directory/ST558/ST558_Homework3/HW2_bp_list.RData")

#modify my hw2 list according to task 1.1:
bp_study$treatment$status <- character(dim(bp_study$treatment)[1])
bp_study$placebo$status <- character(dim(bp_study$placebo)[1])

#modify my hw2 list according to task 1.2:
for (i in 1:dim(bp_study$treatment)[1]) {
  if (bp_study$treatment$post_bp[i] <= 120) {
    bp_study$treatment$status[i] <- "optimal"
  } else if (bp_study$treatment$post_bp[i] <= 130) {
    bp_study$treatment$status[i] <- "borderline"
  } else if (bp_study$treatment$post_bp[i] > 130) {
    bp_study$treatment$status[i] <- "high"
  } 
}

#modify my hw2 list according to task 1.3:
for (i in 1:dim(bp_study$placebo)[1]) {
  if (bp_study$placebo$post_bp[i] <= 120) {
    bp_study$placebo$status[i] <- "optimal"
  } else if (bp_study$placebo$post_bp[i] <= 130) {
    bp_study$placebo$status[i] <- "borderline"
  } else if (bp_study$placebo$post_bp[i] > 130) {
    bp_study$placebo$status[i] <- "high"
  } 
}

#give consistent column names:
colnames(bp_study[[2]]) <- c("patient","pre_bp","post_bp","diff_bp","normal","status")
```

**Apply the function** to hw2 list bp_study:

-   Without specifying the statistic:

```{r}
get_stat(bp_study)
```

-   Specifying the statistic as "var":

```{r}
get_stat(bp_study, "var")
```

-   Specifying the statistic as "sd":

```{r}
get_stat(bp_study, "sd")
```

Specifying the statistic as "min":

```{r}
get_stat(bp_study, "min")
```

Specifying the statistic as "max":

```{r}
get_stat(bp_study, "max")
```
